package com.temple.service;

import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.ParseException;
import java.util.Arrays;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.codehaus.jettison.json.JSONArray;
import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;
import org.eclipse.jetty.util.ajax.JSON;

import com.temple.repository.IRepositoryEntityTypes;
import com.temple.repository.IRepositroyCommunication;
import com.temple.repository.RepositoryCommunicationFactory;
import com.temple.util.TempleUtility;

@Path("/devoteeService")
public class DevoteeService {

	@GET
	@Path("/addNewDevotee")
	@Produces(MediaType.TEXT_PLAIN)
	public Response addNewDevotee(
			@QueryParam("devoteeName") String devoteeName,
			@QueryParam("devoteeInitiatedName") String devoteeInitiatedName,
			@QueryParam("devoteeDob") String devoteeDob,
			@QueryParam("devoteeSMSPhone") String devoteeSMSPhone,
			@QueryParam("devoteeALTPhone") String devoteeALTPhone,
			@QueryParam("devoteeIntroDate") String devoteeIntroDate,
			@QueryParam("devoteeArea") String devoteeArea,
			@QueryParam("devoteeEmail") String devoteeEmail,
			@QueryParam("devoteeSikshaLevel") String devoteeSikshaLevel,
			@QueryParam("isMentor") String isMentor) {
		IRepositroyCommunication repository = null;
		PreparedStatement statement = null;
		Date devoteeDOB = null;
		Date devoteeIntrodate = null;
		boolean mentor = false;
		try {
			repository = RepositoryCommunicationFactory.newInstance();
			String SQL = "Insert into "
					+ IRepositoryEntityTypes.DEVOTEE_INFO
					+ "(DILegalName,DIInitiatedName"
					+ ",DIDOB,DISmsPhone,DIAltPhone,DIIntroDate,DIArea,DIEmail,DISikshaLevel,DIUpdate_ts)"
					+ " values(?,?,?,?,?,?,?,?,?,?)";
			try {
				devoteeDOB = TempleUtility.getSQLDateFromString(devoteeDob);
			} catch (ParseException e) {
				return Response
						.serverError()
						.entity("Invalid date format provided for devotee date of birth.")
						.build();
			}
			try {
				devoteeIntrodate = TempleUtility
						.getSQLDateFromString(devoteeIntroDate);
			} catch (ParseException e) {
				return Response
						.serverError()
						.entity("Invalid date format provided for devotee introduction date.")
						.build();
			}
			if (isMentor != null && !isMentor.isEmpty()
					&& isMentor.equals("true")) {
				mentor = true;
			}
			statement = repository.getPreparedStatement(SQL,
					Statement.RETURN_GENERATED_KEYS);
			statement.setString(1, devoteeName);
			statement.setString(2, devoteeInitiatedName);
			statement.setDate(3, devoteeDOB);
			statement.setString(4, devoteeSMSPhone);
			statement.setString(5, devoteeALTPhone);
			statement.setDate(6, devoteeIntrodate);
			statement.setString(7, devoteeArea);
			statement.setString(8, devoteeEmail);
			statement.setString(9, devoteeSikshaLevel);
			statement.setDate(10, new Date(new java.util.Date().getTime()));
			if (statement.executeUpdate() > 0) {
				ResultSet tableKeys = statement.getGeneratedKeys();
				tableKeys.next();
				int autoGeneratedID = tableKeys.getInt(1);
				if (mentor) {
					addMentor(autoGeneratedID, devoteeName,
							devoteeInitiatedName);
				}
				return Response
						.ok()
						.entity("Sucessfully saved the "
								+ "devotee info ,Devotee ID= "
								+ autoGeneratedID + " to repository.").build();
			} else {
				return Response
						.serverError()
						.entity("Failed to save the "
								+ "devotee info to repository.").build();
			}
		} catch (Exception e) {
			return Response
					.serverError()
					.entity("Problem Occured at "
							+ "server side\n.Reason:"
							+ e.getMessage()).build();
		} finally {
			if (repository != null)
				try {
					// statement.close();
					repository.close();
				} catch (Exception e) {
					return Response
							.serverError()
							.entity("Problem Occured at "
									+ "DB Connection Close \n.Details:"
									+ Arrays.toString(e.getStackTrace())
											.replace(",", "\n")).build();
				}
		}

	}

	private void addMentor(int mentorId, String mentorName,
			String mentorInitiatedName) throws Exception{
		IRepositroyCommunication repository = null;
		PreparedStatement statement = null;
		try {
			repository = RepositoryCommunicationFactory.newInstance();
			String SQL = "Insert into "
					+ IRepositoryEntityTypes.MENTOR_INFO
					+ "(MIMentorID,MIMentorName"
					+ ",MIMentorInitiatedName)"
					+ " values(?,?,?)";
			statement = repository.getPreparedStatement(SQL);
			statement.setInt(1, mentorId);
			statement.setString(2, mentorName);
			statement.setString(3, mentorInitiatedName);
			if (statement.executeUpdate() > 0) {
				System.out.println("Successfully update mentor info");
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (repository != null)
				try {
					// statement.close();
					repository.close();
				} catch (Exception e) {

				}
		}
	}
	
	@GET
	@Path("/getDevotee")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getProgramParticipants(@QueryParam("text") String text) {
		IRepositroyCommunication repository = null;
		PreparedStatement statement = null;
		try {
			repository = RepositoryCommunicationFactory.newInstance();
			String SQL = "SELECT DIDevoteeID,DILegalName,DIInitiatedName, DISmsPhone,DIArea from " + IRepositoryEntityTypes.DEVOTEE_INFO
			//		+" where DILegalName like ?" ;
			+" where DILegalName like ?  or DIInitiatedName like ? or DISmsPhone like ?" ;
			statement = repository.getPreparedStatement(SQL);
			statement.setString(1, text+"%");
			statement.setString(2, text+"%");
			statement.setString(3, text+"%");
			ResultSet result=statement.executeQuery();
			
			JSONArray array = new JSONArray();
			while(result.next()){
				JSONObject response=new JSONObject();
				response.put("id", result.getString("DIDevoteeID"));
				response.put("lname", result.getString("DILegalName"));
				response.put("iname", result.getString("DIInitiatedName"));
				response.put("mobile", result.getString("DISmsPhone"));
				response.put("area", result.getString("DIArea"));
				array.put(response);
			}
			return Response.ok().entity(array.toString()).build();
		} catch (Exception e) {
			e.printStackTrace();
			return Response
					.serverError()
					.entity("Problem Occured at "
							+ "server side\n.Reason:"
							+ e.getMessage()).build();
			
		} finally {
			if (repository != null)
				try {
					repository.close();
				} catch (Exception e) {
					e.printStackTrace();
					return Response
							.serverError()
							.entity("Problem Occured at "
									+ "server side\n.Details:"+e.getMessage()).build();
				}
		}

	}
	
	public static void main(String[] args) {
		DevoteeService service = new DevoteeService();
		Response response=service.getProgramParticipants("9986");
		//Object array = JSON.parse((String) response.getEntity());
		JSONArray data;
		try {
			data = new JSONArray(response.getEntity().toString());
			JSONObject object = new JSONObject(data.get(0).toString());
			System.out.println(object.get("mobile"));
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
			
		
	}
}
